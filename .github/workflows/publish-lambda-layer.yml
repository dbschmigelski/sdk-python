name: Publish Lambda Layer

on:
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Package version to download'
        required: true
        type: string
      python_version:
        description: 'Python version'
        required: false
        type: choice
        options: ['3.10', '3.11', '3.12', '3.13']
      architecture:
        description: 'Architecture'
        required: false
        type: choice
        options: ['x86_64', 'aarch64']
      region:
        description: 'AWS region'
        required: false
        type: choice
        # Only non opt-in regions included for now
        options: ['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'ap-south-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-southeast-1', 'ap-southeast-2', 'ca-central-1', 'eu-central-1', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'eu-north-1', 'sa-east-1']
      confirm:
        description: 'Type "Create Lambda Layer" to confirm publishing the layer'
        required: true
        type: string

env:
  IS_FULL_DEPLOY: ${{ !inputs.python_version && !inputs.architecture && !inputs.region }}

jobs:
  publish-layer:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ inputs.python_version && fromJson(format('["{}"', inputs.python_version)) || fromJson('["3.10", "3.11", "3.12", "3.13"]') }}
        architecture: ${{ inputs.architecture && fromJson(format('["{}"', inputs.architecture)) || fromJson('["x86_64", "aarch64"]') }}
        region: ${{ inputs.region && fromJson(format('["{}"', inputs.region)) || fromJson('["us-east-1", "us-east-2", "us-west-1", "us-west-2", "ap-south-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-southeast-1", "ap-southeast-2", "ca-central-1", "eu-central-1", "eu-west-1", "eu-west-2", "eu-west-3", "eu-north-1", "sa-east-1"]') }}

    outputs:
      layer-version: ${{ env.LAYER_VERSION }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Validate confirmation
        run: |
          CONFIRM="${{ inputs.confirm }}"
          if [ "$CONFIRM" != "Create Lambda Layer" ]; then
            if [[ "$CONFIRM" =~ ^(x86_64|aarch64|3\.[0-9]+|[a-z]+-[a-z]+-[0-9]+)$ ]]; then
              echo "Error: You entered '$CONFIRM' which looks like an architecture, Python version, or region."
              echo "Please type exactly 'Create Lambda Layer' to confirm."
            else
              echo "Confirmation failed. You must type exactly 'Create Lambda Layer' to proceed."
            fi
            exit 1
          fi
          echo "Confirmation validated"

      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.STRANDS_LAMBDA_LAYER_PUBLISHER_ROLE }}
          aws-region: ${{ matrix.region }}

      - name: Create layer directory structure
        run: |
          mkdir -p layer/python

      - name: Download and install package
        run: |
          pip install strands-agents==${{ inputs.package_version }} \
            --python-version ${{ matrix.python-version }} \
            --platform manylinux2014_${{ matrix.architecture }} \
            -t layer/python/ \
            --only-binary=:all:

      - name: Create layer zip
        run: |
          cd layer
          zip -r ../lambda-layer.zip .
          
      - name: Upload layer to S3 and publish
        run: |
          PYTHON_VERSION="${{ matrix.python-version }}"
          ARCH="${{ matrix.architecture }}"
          REGION="${{ matrix.region }}"
          LAYER_NAME="strands-agents-py${PYTHON_VERSION//./_}-${ARCH}"
          BUCKET_NAME="strands-agents-lambda-layers-$(aws sts get-caller-identity --query Account --output text)-${REGION}"
          LAYER_KEY="$LAYER_NAME/v${{ inputs.package_version }}/lambda-layer.zip"

          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION"
            else
              aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" --create-bucket-configuration LocationConstraint="$REGION"
            fi
          fi

          aws s3 cp lambda-layer.zip "s3://$BUCKET_NAME/$LAYER_KEY" --region "$REGION"
          echo "Uploaded layer to s3://$BUCKET_NAME/$LAYER_KEY"

          DESCRIPTION="PyPI package: strands-agents v${{ inputs.package_version }} (Python $PYTHON_VERSION, $ARCH)"

          LAYER_OUTPUT=$(aws lambda publish-layer-version \
            --layer-name $LAYER_NAME \
            --description "$DESCRIPTION" \
            --content S3Bucket=$BUCKET_NAME,S3Key=$LAYER_KEY \
            --compatible-runtimes python${{ matrix.python-version }} \
            --region "$REGION" \
            --license-info Apache-2.0 \
            --output json)

          LAYER_ARN=$(echo "$LAYER_OUTPUT" | jq -r '.LayerArn')
          LAYER_VERSION=$(echo "$LAYER_OUTPUT" | jq -r '.Version')

          echo "Published layer version $LAYER_VERSION with ARN: $LAYER_ARN in region $REGION"

          aws lambda add-layer-version-permission \
            --layer-name $LAYER_NAME \
            --version-number $LAYER_VERSION \
            --statement-id public \
            --action lambda:GetLayerVersion \
            --principal '*' \
            --region "$REGION"
      
          echo "Successfully published layer version $LAYER_VERSION in region $REGION"
          
          if [ "${{ env.IS_FULL_DEPLOY }}" = "true" ] && [ "$REGION" = "us-east-1" ] && [ "$PYTHON_VERSION" = "3.10" ] && [ "$ARCH" = "x86_64" ]; then
            echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV
          fi

  update-docs:
    if: ${{ !inputs.python_version && !inputs.architecture && !inputs.region }}
    needs: publish-layer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout docs repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/docs
          token: ${{ secrets.GITHUB_TOKEN }}
          path: docs

      - name: Update lambda layers documentation
        run: |
          cd docs
          LAYER_VERSION="${{ needs.publish-layer.outputs.layer-version }}"
          NEW_ROW="| $LAYER_VERSION | [${{ inputs.package_version }}](https://pypi.org/project/strands-agents/${{ inputs.package_version }}) | \`arn:aws:lambda:{REGION}:856699698935:layer:strands-agents-{VERSION}-{ARCHITECTURE}:$LAYER_VERSION\` |"
          
          sed -i "/<!-- LAYER_TABLE_START -->/a\$NEW_ROW" docs/user-guide/deploy/lambda-layers.md

      - name: Create Pull Request
        run: |
          cd docs
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          BRANCH="update-lambda-layers-${{ inputs.package_version }}"
          git checkout -b "$BRANCH"
          git add docs/user-guide/deploy/lambda-layers.md
          git commit -m "Update lambda layers with version ${{ inputs.package_version }}"
          git push origin "$BRANCH"
          
          gh pr create \
            --title "Update lambda layers documentation for v${{ inputs.package_version }}" \
            --body "Automated update to add new lambda layer version ${{ inputs.package_version }}" \
            --head "$BRANCH" \
            --base main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}